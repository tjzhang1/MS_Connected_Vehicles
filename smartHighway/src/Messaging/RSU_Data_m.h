//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Messaging/RSU_Data.msg.
//

#ifndef __RSU_DATA_M_H
#define __RSU_DATA_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

struct VehicleData;
class RSU_Data;
/**
 * Struct generated from Messaging/RSU_Data.msg:19 by opp_msgtool.
 */
struct VehicleData
{
    VehicleData();
    omnetpp::opp_string vehicleId;
    double speed = 0;
    double position[2];
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const VehicleData& a);
void __doUnpacking(omnetpp::cCommBuffer *b, VehicleData& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleData& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleData& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>Messaging/RSU_Data.msg:25</tt> by opp_msgtool.
 * <pre>
 * message RSU_Data
 * {
 *     string rsuId;
 *     int lastStepOccupancy;
 *     double lastStepMeanSpeed;
 *     int lastStepHaltingVehiclesNumber;
 *     VehicleData vehicles[];
 * }
 * </pre>
 */
class RSU_Data : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string rsuId;
    int lastStepOccupancy = 0;
    double lastStepMeanSpeed = 0;
    int lastStepHaltingVehiclesNumber = 0;
    VehicleData *vehicles = nullptr;
    size_t vehicles_arraysize = 0;

  private:
    void copy(const RSU_Data& other);

  protected:
    bool operator==(const RSU_Data&) = delete;

  public:
    RSU_Data(const char *name=nullptr, short kind=0);
    RSU_Data(const RSU_Data& other);
    virtual ~RSU_Data();
    RSU_Data& operator=(const RSU_Data& other);
    virtual RSU_Data *dup() const override {return new RSU_Data(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getRsuId() const;
    virtual void setRsuId(const char * rsuId);

    virtual int getLastStepOccupancy() const;
    virtual void setLastStepOccupancy(int lastStepOccupancy);

    virtual double getLastStepMeanSpeed() const;
    virtual void setLastStepMeanSpeed(double lastStepMeanSpeed);

    virtual int getLastStepHaltingVehiclesNumber() const;
    virtual void setLastStepHaltingVehiclesNumber(int lastStepHaltingVehiclesNumber);

    virtual void setVehiclesArraySize(size_t size);
    virtual size_t getVehiclesArraySize() const;
    virtual const VehicleData& getVehicles(size_t k) const;
    virtual VehicleData& getVehiclesForUpdate(size_t k) { return const_cast<VehicleData&>(const_cast<RSU_Data*>(this)->getVehicles(k));}
    virtual void setVehicles(size_t k, const VehicleData& vehicles);
    virtual void insertVehicles(size_t k, const VehicleData& vehicles);
    [[deprecated]] void insertVehicles(const VehicleData& vehicles) {appendVehicles(vehicles);}
    virtual void appendVehicles(const VehicleData& vehicles);
    virtual void eraseVehicles(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RSU_Data& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RSU_Data& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

inline any_ptr toAnyPtr(const VehicleData *p) {return any_ptr(p);}
template<> inline VehicleData *fromAnyPtr(any_ptr ptr) { return ptr.get<VehicleData>(); }
template<> inline RSU_Data *fromAnyPtr(any_ptr ptr) { return check_and_cast<RSU_Data*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __RSU_DATA_M_H

